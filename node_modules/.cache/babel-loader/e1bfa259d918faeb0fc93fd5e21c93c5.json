{"ast":null,"code":"var _jsxFileName = \"/Users/sarahproctor/Desktop/learn/cat-tinder-frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport Home from './pages/Home';\nimport CatIndex from './pages/CatIndex';\nimport CatShow from './pages/CatShow';\nimport CatNew from './pages/CatNew';\nimport CatEdit from './pages/CatEdit'; // imports routing components\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css'; // import mockCats from './mockCats.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createNewCat = newcat => {\n      return fetch(\"http://localhost:3000/cats\", {\n        // converting an object to a string\n        body: JSON.stringify(newcat),\n        // specify the info being sent in JSON and the info returning should be JSON\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // HTTP verb so the correct endpoint is invoked on the server\n        method: \"POST\"\n      }).then(response => {\n        // if the response is good  - redirect to show page\n        if (response.status === 200) {//WIP - HERE!!!\n          // alert with confirmation / eager loading, optimistic rendering\n          // react router has a redirect\n        }\n      }).catch(errors => {\n        console.log(errors);\n      });\n    };\n\n    this.deleteCat = id => {\n      return fetch(`http://localhost:3000/cats/${id}`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"DELETE\"\n      }).then(response => {\n        if (response.status === 200) {\n          catIndex = this.state.cats.findIndex(cat => cat.id === id);\n          const {\n            cats\n          } = this.state;\n          this.setState({\n            cats: cats.splice(catIndex, 1)\n          });\n        }\n      }).catch(errors => {\n        console.log(errors);\n      });\n    };\n\n    this.editCat = editcat => {\n      return fetch(`http://localhost:3000/cats/?????`, {\n        // converting an object to a string\n        body: JSON.stringify(editcat),\n        // specify the info being sent in JSON and the info returning should be JSON\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // HTTP verb so the correct endpoint is invoked on the server\n        method: \"PATCH\"\n      }).then(response => {\n        // if the response is good  - redirect to show page\n        if (response.status === 200) {//WIP - HERE!!!\n        }\n      }).catch(errors => {\n        console.log(errors);\n      });\n    };\n\n    this.state = {\n      cats: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/cats\").then(response => {\n      // checking for a successfull response\n      if (response.status === 200) {\n        // convert the response to json\n        // returns a promise\n        return response.json();\n      }\n    }).then(catsArray => {\n      // set the state with the data from the backend into the empty array\n      this.setState({\n        cats: catsArray\n      });\n    }).catch(errors => {\n      console.log(errors);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      component: Home,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/catindex\",\n      render: props => /*#__PURE__*/React.createElement(CatIndex, {\n        cats: this.state.cats,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }), this.state.cats.map((cat, index) => {\n      return /*#__PURE__*/React.createElement(Route, {\n        key: index,\n        exact: true,\n        path: `/catshow/${cat.id}`,\n        render: props => /*#__PURE__*/React.createElement(CatShow, {\n          id: cat.id,\n          deleteCat: this.deleteCat,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 41\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 19\n        }\n      });\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/catnew\",\n      render: props => /*#__PURE__*/React.createElement(CatNew, {\n        createNewCat: this.createNewCat,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }), this.state.cats.map((cat, index) => {\n      return /*#__PURE__*/React.createElement(Route, {\n        key: index,\n        exact: true,\n        path: `/catedit/${cat.id}`,\n        render: props => /*#__PURE__*/React.createElement(CatEdit, {\n          editCat: this.editCat,\n          id: cat.id,\n          name: cat.name,\n          age: cat.age,\n          enjoys: cat.enjoys,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 23\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 19\n        }\n      });\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sarahproctor/Desktop/learn/cat-tinder-frontend/src/App.js"],"names":["React","Component","Home","CatIndex","CatShow","CatNew","CatEdit","BrowserRouter","Router","Route","Switch","App","constructor","props","createNewCat","newcat","fetch","body","JSON","stringify","headers","method","then","response","status","catch","errors","console","log","deleteCat","id","catIndex","state","cats","findIndex","cat","setState","splice","editCat","editcat","componentDidMount","json","catsArray","render","map","index","name","age","enjoys"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Home from './pages/Home'\nimport CatIndex from './pages/CatIndex'\nimport CatShow from './pages/CatShow'\nimport CatNew from './pages/CatNew'\nimport CatEdit from './pages/CatEdit'\n// imports routing components\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport './App.css'\n// import mockCats from './mockCats.js'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      cats: []\n    }\n  }\n\n  componentDidMount(){\n    fetch(\"http://localhost:3000/cats\")\n    .then((response)=>{\n      // checking for a successfull response\n      if(response.status === 200){\n         // convert the response to json\n         // returns a promise\n        return(response.json())\n      }\n    })\n    .then((catsArray)=>{\n      // set the state with the data from the backend into the empty array\n      this.setState({ cats: catsArray })\n    })\n    .catch(errors => {\n      console.log(errors)\n    })\n  }\n\n\n  createNewCat = (newcat) => {\n    return fetch(\"http://localhost:3000/cats\", {\n      // converting an object to a string\n      body: JSON.stringify(newcat),\n      // specify the info being sent in JSON and the info returning should be JSON\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // HTTP verb so the correct endpoint is invoked on the server\n      method: \"POST\"\n    })\n    .then((response) => {\n      // if the response is good  - redirect to show page\n      if(response.status === 200){\n        //WIP - HERE!!!\n        // alert with confirmation / eager loading, optimistic rendering\n        // react router has a redirect\n      }\n    })\n    .catch(errors => {\n      console.log(errors)\n    })\n  }\n\n  deleteCat = (id) => {\n    return fetch(`http://localhost:3000/cats/${id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"DELETE\"\n    })\n    .then(response => {\n      if(response.status === 200){\n        catIndex = this.state.cats.findIndex(cat => cat.id === id)\n        const { cats } = this.state\n        this.setState({ cats: cats.splice(catIndex, 1) })\n      }\n    })\n    .catch(errors => {\n      console.log(errors)\n    })\n  }\n\n  editCat = (editcat) => {\n    return fetch(`http://localhost:3000/cats/?????`, {\n      // converting an object to a string\n      body: JSON.stringify(editcat),\n      // specify the info being sent in JSON and the info returning should be JSON\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // HTTP verb so the correct endpoint is invoked on the server\n      method: \"PATCH\"\n    })\n    .then((response) => {\n      // if the response is good  - redirect to show page\n      if(response.status === 200){\n        //WIP - HERE!!!\n      }\n    })\n    .catch(errors => {\n      console.log(errors)\n    })\n  }\n\n  render(){\n    return(\n      <React.Fragment>\n        <Router>\n          <Switch>\n            {/* Home */}\n            <Route path=\"/\" exact component={ Home } />\n            {/* Index */}\n            <Route\n              exact path=\"/catindex\"\n              render={ (props) => <CatIndex cats={ this.state.cats } /> }\n            />\n            {/* Show */}\n            {\n              this.state.cats.map((cat, index) => {\n                return(\n                  <Route\n                    key={ index }\n                    exact path={`/catshow/${cat.id}`}\n                    render={ (props) => <CatShow id={ cat.id } deleteCat={ this.deleteCat } /> }\n                  />\n                )\n              })\n            }\n            {/* New */}\n            <Route\n              exact path=\"/catnew\"\n              render={ (props) => <CatNew createNewCat={ this.createNewCat } /> }\n            />\n            {/* Delete */}\n\n            {/* Edit */}\n            {\n              this.state.cats.map((cat, index) => {\n                return(\n                  <Route\n                    key={ index }\n                    exact path={`/catedit/${cat.id}`}\n                    render={ (props) =>\n                      <CatEdit\n                        editCat={ this.editCat }\n                        id={ cat.id }\n                        name={ cat.name }\n                        age={ cat.age }\n                        enjoys={ cat.enjoys }\n                      />\n                    }\n                  />\n                )\n              })\n            }\n          </Switch>\n        </Router>\n      </React.Fragment>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}