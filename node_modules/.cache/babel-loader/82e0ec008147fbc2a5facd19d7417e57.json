{"ast":null,"code":"var _jsxFileName = \"/Users/sarahproctor/Desktop/learn/cat-tinder-frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport Home from './pages/Home';\nimport CatIndex from './pages/CatIndex';\nimport CatShow from './pages/CatShow';\nimport CatNew from './pages/CatNew';\nimport CatEdit from './pages/CatEdit'; // imports routing components\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css'; // import mockCats from './mockCats.js'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.createNewCat = newcat => {\n      return fetch(\"http://localhost:3000/cats\", {\n        // converting an object to a string\n        body: JSON.stringify(newcat),\n        // specify the info being sent in JSON and the info returning should be JSON\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // HTTP verb so the correct endpoint is invoked on the server\n        method: \"POST\"\n      }).then(response => {\n        // if the response is good  - reload the cats\n        if (response.status === 200) {\n          this.componentDidMount();\n        }\n\n        return response;\n      }).catch(errors => {\n        console.log(errors);\n      });\n    };\n\n    this.deleteCat = id => {\n      return fetch(`http://localhost:3000/cats/${id}`, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        method: \"DELETE\"\n      }).then(response => {\n        // if the response is good  - reload the cats\n        if (response.status === 200) {\n          this.componentDidMount();\n        }\n\n        return response;\n      }).catch(errors => {\n        console.log(errors);\n      });\n    };\n\n    this.editCat = editcat => {\n      console.log(editcat);\n      return fetch(`http://localhost:3000/cats/${editcat.id}`, {\n        // converting an object to a string\n        body: JSON.stringify(editcat),\n        // specify the info being sent in JSON and the info returning should be JSON\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // HTTP verb so the correct endpoint is invoked on the server\n        method: \"PATCH\"\n      }).then(response => {\n        // if the response is good  - reload the cats\n        if (response.status === 200) {\n          this.componentDidMount();\n        }\n\n        return response;\n      }).catch(errors => {\n        console.log(errors);\n      });\n    };\n\n    this.state = {\n      cats: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/cats\").then(response => {\n      // checking for a successfull response\n      if (response.status === 200) {\n        // convert the response to json\n        // returns a promise\n        return response.json();\n      }\n    }).then(catsArray => {\n      // set the state with the data from the backend into the empty array\n      this.setState({\n        cats: catsArray\n      });\n    }).catch(errors => {\n      console.log(errors);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      component: Home,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/catindex\",\n      render: props => /*#__PURE__*/React.createElement(CatIndex, {\n        cats: this.state.cats,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/catshow/:id\",\n      render: props => {\n        let id = props.match.params.id;\n        let cat = this.state.cats.find(cat => cat.id === parseInt(id));\n        return /*#__PURE__*/React.createElement(CatShow, {\n          cat: cat,\n          deleteCat: this.deleteCat,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 19\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/catnew\",\n      render: props => /*#__PURE__*/React.createElement(CatNew, {\n        createNewCat: this.createNewCat,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/catedit/:id\",\n      render: props => {\n        let id = props.match.params.id;\n        let cat = this.state.cats.find(cat => cat.id === parseInt(id));\n        return /*#__PURE__*/React.createElement(CatEdit, {\n          editCat: this.editCat,\n          cat: cat,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 21\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/sarahproctor/Desktop/learn/cat-tinder-frontend/src/App.js"],"names":["React","Component","Home","CatIndex","CatShow","CatNew","CatEdit","BrowserRouter","Router","Route","Switch","App","constructor","props","createNewCat","newcat","fetch","body","JSON","stringify","headers","method","then","response","status","componentDidMount","catch","errors","console","log","deleteCat","id","editCat","editcat","state","cats","json","catsArray","setState","render","match","params","cat","find","parseInt"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Home from './pages/Home'\nimport CatIndex from './pages/CatIndex'\nimport CatShow from './pages/CatShow'\nimport CatNew from './pages/CatNew'\nimport CatEdit from './pages/CatEdit'\n// imports routing components\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport './App.css'\n// import mockCats from './mockCats.js'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      cats: []\n    }\n  }\n\n  componentDidMount(){\n    fetch(\"http://localhost:3000/cats\")\n    .then(response => {\n      // checking for a successfull response\n      if(response.status === 200){\n         // convert the response to json\n         // returns a promise\n        return(response.json())\n      }\n    })\n    .then(catsArray => {\n      // set the state with the data from the backend into the empty array\n      this.setState({ cats: catsArray })\n    })\n    .catch(errors => {\n      console.log(errors)\n    })\n  }\n\n\n  createNewCat = (newcat) => {\n    return fetch(\"http://localhost:3000/cats\", {\n      // converting an object to a string\n      body: JSON.stringify(newcat),\n      // specify the info being sent in JSON and the info returning should be JSON\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // HTTP verb so the correct endpoint is invoked on the server\n      method: \"POST\"\n    })\n    .then(response => {\n      // if the response is good  - reload the cats\n      if(response.status === 200){\n        this.componentDidMount()\n      }\n      return response\n    })\n    .catch(errors => {\n      console.log(errors)\n    })\n  }\n\n  deleteCat = (id) => {\n    return fetch(`http://localhost:3000/cats/${id}`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"DELETE\"\n    })\n    .then(response => {\n      // if the response is good  - reload the cats\n      if(response.status === 200){\n        this.componentDidMount()\n      }\n      return response\n    })\n    .catch(errors => {\n      console.log(errors)\n    })\n  }\n\n  editCat = (editcat) => {\n    console.log(editcat)\n    return fetch(`http://localhost:3000/cats/${editcat.id}`, {\n      // converting an object to a string\n      body: JSON.stringify(editcat),\n      // specify the info being sent in JSON and the info returning should be JSON\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      // HTTP verb so the correct endpoint is invoked on the server\n      method: \"PATCH\"\n    })\n    .then(response => {\n      // if the response is good  - reload the cats\n      if(response.status === 200){\n        this.componentDidMount()\n      }\n      return response\n    })\n    .catch(errors => {\n      console.log(errors)\n    })\n  }\n\n  render(){\n    return(\n      <React.Fragment>\n        <Router>\n          <Switch>\n            {/* Home */}\n            <Route path=\"/\" exact component={ Home } />\n            {/* Index */}\n            <Route\n              exact path=\"/catindex\"\n              render={ (props) => <CatIndex cats={ this.state.cats } /> }\n            />\n            {/* Show */}\n            <Route\n              exact path={\"/catshow/:id\"}\n              render={ (props) => {\n                let id = props.match.params.id\n                let cat = this.state.cats.find(cat => cat.id === parseInt(id))\n                return (\n                  <CatShow\n                    cat={ cat }\n                    deleteCat={ this.deleteCat }\n                  />\n                )\n              }}\n            />\n            {/* New */}\n            <Route\n              exact path=\"/catnew\"\n              render={ (props) => <CatNew createNewCat={ this.createNewCat } /> }\n            />\n            {/* Edit */}\n              <Route\n                exact path={\"/catedit/:id\"}\n                render={ (props) => {\n                  let id = props.match.params.id\n                  let cat = this.state.cats.find(cat => cat.id === parseInt(id))\n                  return(\n                    <CatEdit\n                      editCat={ this.editCat }\n                      cat={ cat }\n                    />\n                  )\n                }}\n              />\n          </Switch>\n        </Router>\n      </React.Fragment>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}